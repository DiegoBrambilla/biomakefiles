# makefile.misc
#
# Library makefile containing various simple pattern rules which doesn't fit
# anywhere else.
#
# Include the full path of this file in your Makefile ...
#
# Author: erik.rikard.daniel@gmail.com

SHELL := /bin/bash

# Some general purpose macros

# Concate a number of gzipped files and write to a gzipped file.
CONCAT_GZIPPED = gunzip -c $^ | gzip -c > $@

# *** Targets ***

# Interleave two fastq files (named %.r1.fastq and %.r2.fastq respectively).
#
# The target uses a python script -- interleave_fastq.py -- cloned from this
# gist:
#
#   https://gist.github.com/rpucheq/cf50eeea794529ca6b0e
#
# Dependencies will automatically be unzipped if not present in unzipped format
# thanks to the pattern above. Unzipped files will be deleted after
# interleaving.
interleave_all_fastq.gzs: $(subst .r1.fastq.gz,.intlv.fastq.gz,$(wildcard *.r1.fastq.gz))

%.intlv.fastq.gz: %.r1.fastq %.r2.fastq
	interleave_fastq.py $^ | gzip -c > $@

# The same, but not zipping
interleave_all_fastqs: $(subst .r1.fastq,.intlv.fastq,$(wildcard *.r1.fastq))

%.intlv.fastq: %.r1.fastq %.r2.fastq
	interleave_fastq.py $^ > $@
	
# Concatenate instead of interleave
%.concat.fastq.gz: %.r1.fastq.gz %.r2.fastq.gz
	$(CONCAT_GZIPPED)

# Clean up a fasta file so that names does not contain spaces, dashes and other
# characters that cause problems in various programs. Also places sequences on
# one line so that one can more easily select sequences with grep.
CLEAN_FASTA = awk '/^>/ {printf("\n%s\n",$$0);next; } { printf("%s",$$0);} END {printf("\n");}' $< | sed '/^$$/d' | sed '/^>/s/[ \t]\+/_/g' | sed '/^>/s/[-(),:;+|]//g' > $@

%.c.fna: %.fna
	$(CLEAN_FASTA)

%.c.faa: %.faa
	$(CLEAN_FASTA)

%.phylip: %.alnfaa
	echo "$$(grep -c '>' $<) $$(grep -v '>' $< | head -n 1 | awk '{ print length($$1); }')" > $@
	awk '/^>(.*)/ { printf("%s ", substr($$1, 2)); next; } !/^>/ { print $$0; }' $< >> $@

# Cluster sequences based on fraction identity. Override the CLUSTER_LEVELS
# macro if you need other levels than the default specified here.
CLUSTER_LEVELS = 1.00 0.99 0.98 0.97 0.95 0.93 0.90 0.85 0.80 0.70 0.60 0.50

%.uclusters: %.faa
	for n in $(CLUSTER_LEVELS); do \
	  d=$(basename $@).uc$$n.clusters.d; \
	  mkdir $$d; \
	  rm -f $$d/*.faa; \
	  usearch -cluster_fast $< -id $$n -centroids $(basename $@).uc$$n.faa -clusters $$d/cluster_; \
	done
	touch $@

fastqgzs2seqlens: $(subst .fastq.gz,.seqlens.tsv,$(wildcard *.fastq.gz))

%.seqlens.tsv: %.fastq.gz
	echo "seqlen	n" > $@
	gunzip -c $< | awk 'NR%4 == 2 {lengths[length($0)]++} END {for (l in lengths) {print l,"\t",lengths[l]}}' | sed 's/ *//g' >> $@

%.fna: %.fastq.gz
	gunzip -c $< | fastq_to_fasta > $@
